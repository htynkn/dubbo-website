<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Apache Dubbo – 参考手册</title><link>https://dubbo.apache.org/zh/docs/v3.0/references/</link><description>Recent content in 参考手册 on Apache Dubbo</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://dubbo.apache.org/zh/docs/v3.0/references/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: SPI 扩展实现</title><link>https://dubbo.apache.org/zh/docs/v3.0/references/spis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh/docs/v3.0/references/spis/</guid><description>
&lt;p>SPI 扩展接口仅用于系统集成，或 Contributor 扩展功能插件。&lt;/p></description></item><item><title>Docs: Dubbo 配置</title><link>https://dubbo.apache.org/zh/docs/v3.0/references/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh/docs/v3.0/references/configuration/</guid><description/></item><item><title>Docs: 功能列表与用法示例</title><link>https://dubbo.apache.org/zh/docs/v3.0/references/features/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh/docs/v3.0/references/features/</guid><description>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Tips&lt;/h4>
想完整的运行起来，请参见：&lt;a href="../quick-start">快速启动&lt;/a>，这里只列出各种场景的配置方式。
以下示例全部使用基于 Spring 的 &lt;a href="../configuration/xml">Xml配置&lt;/a>作为参考，如果不想使用 Spring，而希望通过 API 的方式进行调用，请参见：&lt;a href="../configuration/api">API配置&lt;/a>
&lt;/div></description></item><item><title>Docs: Kubernetes 生命周期对齐探针</title><link>https://dubbo.apache.org/zh/docs/v3.0/references/lifecycle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh/docs/v3.0/references/lifecycle/</guid><description/></item><item><title>Docs: RPC协议</title><link>https://dubbo.apache.org/zh/docs/v3.0/references/protocols/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh/docs/v3.0/references/protocols/</guid><description/></item><item><title>Docs: 序列化协议</title><link>https://dubbo.apache.org/zh/docs/v3.0/references/serializations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh/docs/v3.0/references/serializations/</guid><description/></item><item><title>Docs: 路由规则</title><link>https://dubbo.apache.org/zh/docs/v3.0/references/routers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dubbo.apache.org/zh/docs/v3.0/references/routers/</guid><description>
&lt;h3 id="基本思想">基本思想&lt;/h3>
&lt;p>基于路由链，采用Pipeline的处理方式，如下图所示：&lt;/p>
&lt;p>&lt;img src="https://dubbo.apache.org/imgs/user/route-rule1.png" alt="route-rule1.png">&lt;/p>
&lt;p>可以把路由链的逻辑简单的理解为 target = rn(&amp;hellip;r3(r2(r1(src))))。对于每一个 router 内部的逻辑，可以抽象为输入地址 addrs-in 与 router 中按全量地址 addrs-all 实现切分好的 n 个互不相交的地址池 addrs-pool-1 &amp;hellip; addrs-pool-n 按实现定义好的规则取交集作为输出 addrs-out。以此类推，完成整个路由链的计算。&lt;/p>
&lt;p>&lt;img src="https://dubbo.apache.org/imgs/user/route-rule2.png" alt="route-rule2.png">&lt;/p>
&lt;p>另外一方面，如果 router(n) 需要执行 fallback 逻辑的时候，那么需要经过 router(n) 就应该决定好 fallback 逻辑&lt;/p>
&lt;h3 id="fallback-处理原则">fallback 处理原则&lt;/h3>
&lt;p>由于多个 router 之间多个条件组件之后，很容易出现地址被筛选为空的情况，那么我们需要针对这情况进行 fallback 处理，保证业务在正确性的前提下，能够顺利找到有效地址。&lt;/p>
&lt;p>首先我们看一下以下规则&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#268bd2">apiVersion&lt;/span>: service.dubbo.apache.org/v1alpha1
&lt;span style="color:#268bd2">kind&lt;/span>: VirtualService
&lt;span style="color:#268bd2">metadata&lt;/span>:
&lt;span style="color:#268bd2">name&lt;/span>: demo-route
&lt;span style="color:#268bd2">spec&lt;/span>:
&lt;span style="color:#268bd2">hosts&lt;/span>:
- demo // 统一定义为应用名
&lt;span style="color:#268bd2">dubbo&lt;/span>:
- &lt;span style="color:#268bd2">service&lt;/span>:
- &lt;span style="color:#268bd2">exact&lt;/span>: com.taobao.hsf.demoService:1.0.0
- &lt;span style="color:#268bd2">exact&lt;/span>: com.taobao.hsf.demoService:2.0.0
&lt;span style="color:#268bd2">routedetail&lt;/span>:
- &lt;span style="color:#268bd2">name&lt;/span>: sayHello-String-method-route
&lt;span style="color:#268bd2">match&lt;/span>:
- &lt;span style="color:#268bd2">method&lt;/span>:
&lt;span style="color:#268bd2">name_match&lt;/span>:
&lt;span style="color:#268bd2">exact&lt;/span>: &lt;span style="color:#2aa198">&amp;#34;sayHello&amp;#34;&lt;/span>
.....
&lt;span style="color:#268bd2">argp&lt;/span>:
- string
&lt;span style="color:#268bd2">route&lt;/span>:
- &lt;span style="color:#268bd2">destination&lt;/span>:
&lt;span style="color:#268bd2">host&lt;/span>: demo
&lt;span style="color:#268bd2">subset&lt;/span>: v1
&lt;span style="color:#268bd2">fallback&lt;/span>:
&lt;span style="color:#268bd2">destination&lt;/span>:
&lt;span style="color:#268bd2">host&lt;/span>: demo
&lt;span style="color:#268bd2">subset&lt;/span>: v2
&lt;span style="color:#268bd2">fallback&lt;/span>:
&lt;span style="color:#268bd2">destination&lt;/span>:
&lt;span style="color:#268bd2">host&lt;/span>: demo
&lt;span style="color:#268bd2">subset&lt;/span>: v3
- &lt;span style="color:#268bd2">name&lt;/span>: sayHello-method-route
&lt;span style="color:#268bd2">match&lt;/span>:
- &lt;span style="color:#268bd2">method&lt;/span>:
&lt;span style="color:#268bd2">name_match&lt;/span>:
&lt;span style="color:#268bd2">exact&lt;/span>: &lt;span style="color:#2aa198">&amp;#34;s-method&amp;#34;&lt;/span>
&lt;span style="color:#268bd2">route&lt;/span>:
- &lt;span style="color:#268bd2">destination&lt;/span>:
&lt;span style="color:#268bd2">host&lt;/span>: demo
&lt;span style="color:#268bd2">subset&lt;/span>: v2
&lt;span style="color:#268bd2">fallback&lt;/span>:
&lt;span style="color:#268bd2">destination&lt;/span>:
&lt;span style="color:#268bd2">host&lt;/span>: demo
&lt;span style="color:#268bd2">subset&lt;/span>: v3
- &lt;span style="color:#268bd2">name&lt;/span>: interface-route
&lt;span style="color:#268bd2">route&lt;/span>:
- &lt;span style="color:#268bd2">destination&lt;/span>:
&lt;span style="color:#268bd2">host&lt;/span>: demo
&lt;span style="color:#268bd2">subset&lt;/span>: v3
- &lt;span style="color:#268bd2">service&lt;/span>:
....
---
&lt;span style="color:#268bd2">apiVersion&lt;/span>: service.dubbo.apache.org/v1alpha1
&lt;span style="color:#268bd2">kind&lt;/span>: DestinationRule
&lt;span style="color:#268bd2">metadata&lt;/span>:
&lt;span style="color:#268bd2">name&lt;/span>: demo-route
&lt;span style="color:#268bd2">spec&lt;/span>:
&lt;span style="color:#268bd2">host&lt;/span>: demo
&lt;span style="color:#268bd2">subsets&lt;/span>:
- &lt;span style="color:#268bd2">name&lt;/span>: v1
&lt;span style="color:#268bd2">labels&lt;/span>:
&lt;span style="color:#268bd2">sigma.ali/mg&lt;/span>: v1-host
- &lt;span style="color:#268bd2">name&lt;/span>: v2
&lt;span style="color:#268bd2">labels&lt;/span>:
&lt;span style="color:#268bd2">sigma.ali/mg&lt;/span>: v2-host
- &lt;span style="color:#268bd2">name&lt;/span>: v3
&lt;span style="color:#268bd2">labels&lt;/span>:
&lt;span style="color:#268bd2">sigma.ali/mg&lt;/span>: v3-host
&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们以脚本路由为例，这个脚本路由的匹配条件是遵循一个原则的，就是匹配的范围是从精确到广泛的一个过程，在这个示例来说，就是 sayHello(string)参数 -&amp;gt; sayHello 方法 -&amp;gt; 接口级路由 的一个匹配查找过程。&lt;/p>
&lt;p>那么如果我们已经满足某个条件，但是选到的 subset 地址为空，我们将如何进行 fallback 处理呢？&lt;/p>
&lt;p>以匹配 sayHello(string)参数 条件为例，我们选择到的是 v1 subset,如果是空，我们可以向上一级是寻找地址，也就是方法级去寻找地址，具体的配置为下&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml"> - &lt;span style="color:#268bd2">name&lt;/span>: sayHello-String-method-route
&lt;span style="color:#268bd2">match&lt;/span>:
- &lt;span style="color:#268bd2">method&lt;/span>:
&lt;span style="color:#268bd2">name_match&lt;/span>:
&lt;span style="color:#268bd2">exact&lt;/span>: &lt;span style="color:#2aa198">&amp;#34;sayHello&amp;#34;&lt;/span>
.....
&lt;span style="color:#268bd2">argp&lt;/span>:
- string
&lt;span style="color:#268bd2">route&lt;/span>:
- &lt;span style="color:#268bd2">destination&lt;/span>:
&lt;span style="color:#268bd2">host&lt;/span>: demo
&lt;span style="color:#268bd2">subset&lt;/span>: v1
&lt;span style="color:#268bd2">fallback&lt;/span>:
&lt;span style="color:#268bd2">destination&lt;/span>:
&lt;span style="color:#268bd2">host&lt;/span>: demo
&lt;span style="color:#268bd2">subset&lt;/span>: v2
&lt;span style="color:#268bd2">fallback&lt;/span>:
&lt;span style="color:#268bd2">destination&lt;/span>:
&lt;span style="color:#268bd2">host&lt;/span>: demo
&lt;span style="color:#268bd2">subset&lt;/span>: v3
&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时我们选到的地址是 v2 方法级地址，如果 v2 还是没有地址，根据规则的定义，我们是可以 fallback 到 v3 接口级。&lt;/p>
&lt;p>假设我们有一个方法匹配时，如果没有地址，需要不进行 fallback，直接报错，我们可以这样配置&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#268bd2">apiVersion&lt;/span>: service.dubbo.apache.org/v1alpha1
&lt;span style="color:#268bd2">kind&lt;/span>: VirtualService
&lt;span style="color:#268bd2">metadata&lt;/span>:
&lt;span style="color:#268bd2">name&lt;/span>: demo-route
&lt;span style="color:#268bd2">spec&lt;/span>:
&lt;span style="color:#268bd2">hosts&lt;/span>:
- demo // 统一定义为应用名
&lt;span style="color:#268bd2">dubbo&lt;/span>:
- &lt;span style="color:#268bd2">service&lt;/span>:
- &lt;span style="color:#268bd2">exact&lt;/span>: com.taobao.hsf.demoService:1.0.0
- &lt;span style="color:#268bd2">exact&lt;/span>: com.taobao.hsf.demoService:2.0.0
&lt;span style="color:#268bd2">routedetail&lt;/span>:
- &lt;span style="color:#268bd2">name&lt;/span>: sayHello-String-method-route
&lt;span style="color:#268bd2">match&lt;/span>:
- &lt;span style="color:#268bd2">method&lt;/span>:
&lt;span style="color:#268bd2">name_match&lt;/span>:
&lt;span style="color:#268bd2">exact&lt;/span>: &lt;span style="color:#2aa198">&amp;#34;sayHello&amp;#34;&lt;/span>
.....
&lt;span style="color:#268bd2">argp&lt;/span>:
- string
&lt;span style="color:#268bd2">route&lt;/span>:
- &lt;span style="color:#268bd2">destination&lt;/span>:
&lt;span style="color:#268bd2">host&lt;/span>: demo
&lt;span style="color:#268bd2">subset&lt;/span>: v1
&lt;span style="color:#268bd2">fallback&lt;/span>:
&lt;span style="color:#268bd2">destination&lt;/span>:
&lt;span style="color:#268bd2">host&lt;/span>: demo
&lt;span style="color:#268bd2">subset&lt;/span>: v2
&lt;span style="color:#268bd2">fallback&lt;/span>:
&lt;span style="color:#268bd2">destination&lt;/span>:
&lt;span style="color:#268bd2">host&lt;/span>: demo
&lt;span style="color:#268bd2">subset&lt;/span>: v3
- &lt;span style="color:#268bd2">name&lt;/span>: sayHello-method-route
&lt;span style="color:#268bd2">match&lt;/span>:
- &lt;span style="color:#268bd2">method&lt;/span>:
&lt;span style="color:#268bd2">name_match&lt;/span>:
&lt;span style="color:#268bd2">exact&lt;/span>: &lt;span style="color:#2aa198">&amp;#34;s-method&amp;#34;&lt;/span>
&lt;span style="color:#268bd2">route&lt;/span>:
- &lt;span style="color:#268bd2">destination&lt;/span>:
&lt;span style="color:#268bd2">host&lt;/span>: demo
&lt;span style="color:#268bd2">subset&lt;/span>: v2
&lt;span style="color:#268bd2">fallback&lt;/span>:
&lt;span style="color:#268bd2">destination&lt;/span>:
&lt;span style="color:#268bd2">host&lt;/span>: demo
&lt;span style="color:#268bd2">subset&lt;/span>: v3
- &lt;span style="color:#268bd2">name&lt;/span>: some-method-route
&lt;span style="color:#268bd2">match&lt;/span>:
- &lt;span style="color:#268bd2">method&lt;/span>:
&lt;span style="color:#268bd2">name_match&lt;/span>:
&lt;span style="color:#268bd2">exact&lt;/span>: &lt;span style="color:#2aa198">&amp;#34;some-method&amp;#34;&lt;/span>
&lt;span style="color:#268bd2">route&lt;/span>:
- &lt;span style="color:#268bd2">destination&lt;/span>:
&lt;span style="color:#268bd2">host&lt;/span>: demo
&lt;span style="color:#268bd2">subset&lt;/span>: v4
- &lt;span style="color:#268bd2">name&lt;/span>: interface-route
&lt;span style="color:#268bd2">route&lt;/span>:
- &lt;span style="color:#268bd2">destination&lt;/span>:
&lt;span style="color:#268bd2">host&lt;/span>: demo
&lt;span style="color:#268bd2">subset&lt;/span>: v3
- &lt;span style="color:#268bd2">service&lt;/span>:
....
---
&lt;span style="color:#268bd2">apiVersion&lt;/span>: service.dubbo.apache.org/v1alpha1
&lt;span style="color:#268bd2">kind&lt;/span>: DestinationRule
&lt;span style="color:#268bd2">metadata&lt;/span>:
&lt;span style="color:#268bd2">name&lt;/span>: demo-route
&lt;span style="color:#268bd2">spec&lt;/span>:
&lt;span style="color:#268bd2">host&lt;/span>: demo
&lt;span style="color:#268bd2">subsets&lt;/span>:
- &lt;span style="color:#268bd2">name&lt;/span>: v1
&lt;span style="color:#268bd2">labels&lt;/span>:
&lt;span style="color:#268bd2">sigma.ali/mg&lt;/span>: v1-host
- &lt;span style="color:#268bd2">name&lt;/span>: v2
&lt;span style="color:#268bd2">labels&lt;/span>:
&lt;span style="color:#268bd2">sigma.ali/mg&lt;/span>: v2-host
- &lt;span style="color:#268bd2">name&lt;/span>: v3
&lt;span style="color:#268bd2">labels&lt;/span>:
&lt;span style="color:#268bd2">sigma.ali/mg&lt;/span>: v3-host
&lt;/code>&lt;/pre>&lt;/div>&lt;p>从这个规则我们看出来匹配到 some-method 条件时对应的是 v4 subset，那么 v4 为空时，因为没有配置 fallback ，此时会直接报错&lt;/p>
&lt;h4 id="fallback-处理原则总结">fallback 处理原则总结&lt;/h4>
&lt;ul>
&lt;li>我们应该在 VirtualService route 中配置好 Destination 的 fallback 处理逻辑&lt;/li>
&lt;li>在 fallback subset 时，如果对应的 subset 也配置有 fallback subset 时，也应递归处理；fallback subset 之间的关系也应该是从具体到广泛&lt;/li>
&lt;li>我们在编写匹配条件时，应该遵循从 具体条件到广泛条件 的原则&lt;/li>
&lt;/ul>
&lt;h3 id="routechain-的组装模式-目前未实现">RouteChain 的组装模式 (目前未实现)&lt;/h3>
&lt;p>&lt;img src="https://dubbo.apache.org/imgs/user/route-rule3.png" alt="route-rule3.png">&lt;/p>
&lt;p>我们看到上面的图，在路由的过程当中，我们是 Pipeline 的处理方式，Pipeline 的 Router 节点存在顺序，并且每个 Router 都有一个唯一对应的 VirtualService 和 &lt;strong>多个&lt;/strong> 相应的 DestinationRule 进行描述。&lt;/p>
&lt;p>以 Nacos 上存着的路由规则配置为例，配置的格式如下：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#268bd2">DataId&lt;/span>: Demo.rule.yaml
&lt;span style="color:#268bd2">GROUP&lt;/span>: HSF
&lt;span style="color:#268bd2">content&lt;/span>:
VirtualService A
---
DestinationRule A1
---
DestinationRule A2
---
VirtualService B
---
DestinationRule B
---
VirtualService C
---
DestinationRule C
---
...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>VirtualService A&lt;/code> 与 &lt;code>DestinationRule A1&lt;/code> 、&lt;code>DestinationRule A2&lt;/code> 组成一个 Router A，&lt;code>VirtualService B&lt;/code> 与 &lt;code>DestinationRule B&lt;/code> 组成 Router B,以此类推，完成整个 router 链的组装。&lt;/p></description></item></channel></rss>